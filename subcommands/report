#!/usr/bin/env bash
source "$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")" )" && pwd)/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/global-cert/internal-functions"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

fn-ssl-enabled() {
  local SSL_ENABLED=false

  if fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    SSL_ENABLED=true
  fi
  echo "$SSL_ENABLED" 
}

fn-ssl-expires-at() {
  if fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    openssl x509 -in "$GLOBAL_SSL_PATH/server.crt" -noout -text | grep "Not After :" | awk -F " : " '{ print $2 }'
  fi
}

fn-ssl-hostnames() {
  if fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    fn-get-ssl-hostnames "$GLOBAL_SSL_PATH" | xargs
  fi
}

fn-ssl-issuer() {
  if fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    openssl x509 -in "$GLOBAL_SSL_PATH/server.crt" -noout -text | grep "Issuer:" | xargs | sed -e "s/Issuer: //g"
  fi
}

fn-ssl-starts-at() {
  if fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    openssl x509 -in "$GLOBAL_SSL_PATH/server.crt" -noout -text | grep "Not Before:" | awk -F ": " '{ print $2 }'
  fi
}

fn-ssl-subject() {
  if fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    openssl x509 -in "$GLOBAL_SSL_PATH/server.crt" -noout -subject | sed -e "s:subject= ::g"| sed -e "s:^/::g" | sed -e "s:/:; :g"
  fi
}

fn-ssl-verified() {
  local SSL_VERIFY_OUTPUT=false SSL_SELF_SIGNED="self signed"

  if ! fn-is-ssl-enabled "$GLOBAL_SSL_PATH"; then
    return
  fi

  SSL_VERIFY_OUTPUT="$(openssl verify -verbose -purpose sslserver "$GLOBAL_SSL_PATH/server.crt" | awk -F ':' '{ print $2 }' | tail -1 | xargs || true)"
  if [[ "$SSL_VERIFY_OUTPUT" == "OK" ]]; then
    SSL_SELF_SIGNED="verified by a certificate authority"
  fi

  echo "$SSL_SELF_SIGNED"
}

global_report() {
  declare INFO_FLAG="$1"
  if [[ "$INFO_FLAG" == "true" ]]; then
    INFO_FLAG=""
  fi
  local flag_map=(
    "--global-ssl-dir: $GLOBAL_SSL_PATH"
    "--global-ssl-enabled: $(fn-ssl-enabled)"
    "--global-ssl-hostnames: $(fn-ssl-hostnames)"
    "--global-ssl-expires-at: $(fn-ssl-expires-at)"
    "--global-ssl-issuer: $(fn-ssl-issuer)"
    "--global-ssl-starts-at: $(fn-ssl-starts-at)"
    "--global-ssl-subject: $(fn-ssl-subject)"
    "--global-ssl-verified: $(fn-ssl-verified)"
  )

  if [[ -z "$INFO_FLAG" ]]; then
    dokku_log_info2 "global ssl information"
    for flag in "${flag_map[@]}"; do
      key="$(echo "${flag#--}" | cut -f1 -d' ' | tr - ' ')"
      dokku_log_verbose "$(printf "%-20s %-25s" "${key^}" "${flag#*: }")"
    done
  else
    local match=false; local value_exists=false
    for flag in "${flag_map[@]}"; do
      valid_flags="${valid_flags} $(echo "$flag" | cut -d':' -f1)"
      if [[ "$flag" == "${INFO_FLAG}:"* ]]; then
        value=${flag#*: }
        size="${#value}"
        if [[ "$size" -ne 0 ]]; then
          echo "$value" && match=true && value_exists=true
        else
          match=true
        fi
      fi
    done
    if [[ "$match" == "true" ]]; then
      [[ "$value_exists" == "true" ]] || dokku_log_fail "not deployed"
    else
      dokku_log_fail "Invalid flag passed, valid flags:${valid_flags}"
    fi
  fi
}

cmd-global-cert-report() {
  declare desc="displays the global ssl report"
  local cmd="$PLUGIN_COMMAND_PREFIX:report"
  local INFO_FLAG="$2"

  if [[ -z "$INFO_FLAG" ]]; then
    INFO_FLAG="true"
  fi

  global_report "$INFO_FLAG"
}

cmd-global-cert-report "$@"
